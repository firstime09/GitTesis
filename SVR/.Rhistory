int_result <- intersection %>%
group_by(id_polygons) %>%
count()
as.data.frame(int_result)[,-3]
int_result$n
# using dplyr
# int_result <- intersection %>% group_by(id_polygons) %>% count()
int_result <- intersection %>% group_by(nilai) %>% count()
int_result
int_result$nilai
count()
?count()
table(intersection$nilai) # using table
# using dplyr
# int_result <- intersection %>% group_by(id_polygons) %>% count()
int_result <- intersection %>% group_by(nilai) %>% count()
# Get sample random poins from polygon bbox
set.seed(4)
bbox <- st_as_sfc(st_bbox(polygon))
points <- st_sample(x = bbox, size = 100, type = "random")
points <- st_as_sf(data.frame(id_points = as.character(1:100)), points) # add points ID
points$nilai <-runif(100, min = 0, max = 1)
# Plot polygon + points
plot(polygon, graticule = st_crs(4326), key.pos = 1)
plot(points, pch = 19, col = "black", add = TRUE)
intersection <- st_intersection(x = polygon, y = points)
# Plot intersection
plot(polygon, graticule = st_crs(4326), key.pos = 1)
plot(intersection[1], col = "black", pch = 19, add = TRUE)
# View result
table(intersection$id_polygons) # using table
table(intersection$nilai) # using table
# using dplyr
# int_result <- intersection %>% group_by(id_polygons) %>% count()
int_result <- intersection %>% group_by(nilai) %>% count()
as.data.frame(int_result)[,-3]
# using dplyr
int_result <- intersection %>% group_by(id_polygons) %>% count()
as.data.frame(int_result)[,-3]
intersection
# using dplyr
int_result <- intersection %>% group_by(id_polygons) %>% count(intersection$nilai)
intersection
plot(intersection[1], col = "black", pch = 19, add = TRUE)
plot(intersection[1], col = "black", pch = 19, add = TRUE)
plot(intersection[1], col = "black", pch = 19, add = TRUE)
# Plot intersection
plot(polygon, graticule = st_crs(4326), key.pos = 1)
plot(intersection[1], col = "black", pch = 19, add = TRUE)
int_result <- intersection %>% group_by(id_polygons) %>%
dplyr::summarise(Mean=mean(intersection$nilai, na.rm=TRUE))
int_result
# using dplyr
int_result <- intersection %>% group_by(id_polygons) %>% count(intersection$nilai)
# using dplyr
int_result <- intersection %>% group_by(id_polygons) %>% count()
int_result
int_result$geometry
int_result2 <- intersection %>% group_by(id_polygons) %>%
dplyr::summarise(Mean=mean(intersection$nilai, na.rm=TRUE))
int_result2
mean(intersection$nilai)
points
mean(points$nilai)
plot(intersection)
plot(intersection$nilai)
plot(intersection$id_polygons, intersection$nilai)
plot(intersection$nilai)
plot(intersection)
# Plot polygon + points
plot(polygon, graticule = st_crs(4326), key.pos = 1)
# Inject outliers into data.
cars1 <- cars[1:30, ]  # original data
cars_outliers <- data.frame(speed=c(19,19,20,20,20), dist=c(190, 186, 210, 220, 218))  # introduce outliers.
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
# Inject outliers into data.
cars1 <- cars[1:30, ]  # original data
cars_outliers <- data.frame(speed=c(19,19,20,20,20), dist=c(190, 186, 210, 220, 218))  # introduce outliers.
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
View(cars_outliers)
boxplot(cars_outliers)
boxplot(cars1)
boxplot(cars2)
# Plot of data with outliers.
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist, xlim=c(0, 28), ylim=c(0, 230), main="With Outliers", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers. Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist, xlim=c(0, 28), ylim=c(0, 230), main="Outliers removed \n A much better fit!", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
plot(cars2)
View(cars2)
test<- remove_outliers(cars2)
set.seed(1)
x <- rnorm(100)
x <- c(-10, x, 10)
y <- remove_outliers(x)
## png()
par(mfrow = c(1, 2))
boxplot(x)
boxplot(y)
url <- "http://rstatistics.net/wp-content/uploads/2015/09/ozone.csv"
# alternate source:  https://raw.githubusercontent.com/selva86/datasets/master/ozone.csv
inputData <- read.csv(url)  # import data
outlier_values <- boxplot.stats(inputData$pressure_height)$out  # outlier values.
boxplot(inputData$pressure_height, main="Pressure Height", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
boxplot(cars2$speed)
boxplot(cars1$speed)
boxplot(cars1$dist)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
# Inject outliers into data.
cars1 <- cars[1:30, ]  # original data
cars_outliers <- data.frame(speed=c(19,19,20,20,20), dist=c(190, 186, 210, 220, 218))  # introduce outliers.
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
# Plot of data with outliers.
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist, xlim=c(0, 28), ylim=c(0, 230), main="With Outliers", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers. Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist, xlim=c(0, 28), ylim=c(0, 230), main="Outliers removed \n A much better fit!", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
outlier_values <- boxplot.stats(inputData$pressure_height)$out  # outlier values.
boxplot(inputData$pressure_height, main="Pressure Height", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
url <- "http://rstatistics.net/wp-content/uploads/2015/09/ozone.csv"
ozone <- read.csv(url)
# For categorical variable
boxplot(ozone_reading ~ Month, data=ozone, main="Ozone reading across months")  # clear pattern is noticeable.
boxplot(ozone_reading ~ Day_of_week, data=ozone, main="Ozone reading for days of week")
View(ozone)
boxplot(ozone_reading ~ pressure_height, data=ozone, main="Boxplot for Pressure height (continuos var) vs Ozone")
boxplot(ozone_reading ~ cut(pressure_height, pretty(inputData$pressure_height)), data=ozone, main="Boxplot for Pressure height (categorial) vs Ozone", cex.axis=0.5)
# For continuous variable (convert to categorical if needed.)
boxplot(ozone_reading ~ pressure_height, data=ozone, main="Boxplot for Pressure height (continuos var) vs Ozone")
boxplot(ozone_reading ~ cut(pressure_height, pretty(inputData$pressure_height)), data=ozone, main="Boxplot for Pressure height (categorial) vs Ozone", cex.axis=0.5)
#Multivariate Model Approach=====
mod <- lm(ozone_reading ~ ., data=ozone)
cooksd <- cooks.distance(mod)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
cooksd
4*mean(cooksd)
# add labels
#Outliers Test====
car::outlierTest(mod)
install.packages("car")
library("car", lib.loc="~/R/win-library/3.5")
# add labels
#Outliers Test====
car::outlierTest(mod)
#Outliers package
set.seed(1234)
y=rnorm(100)
outlier(y)
install.packages("outliers")
library("outliers", lib.loc="~/R/win-library/3.5")
outlier(y)
outlier(y,opposite=TRUE)
dim(y) <- c(20,5)  # convert it to a matrix
outlier(y)
outlier(y,opposite=TRUE)
# Treatment
x <- ozone$pressure_height
qnt <- quantile(x, probs=c(.25, .75), na.rm = T)
caps <- quantile(x, probs=c(.05, .95), na.rm = T)
H <- 1.5 * IQR(x, na.rm = T) x[x < (qnt[1] - H)]  (qnt[2] + H)] <- caps[2]
H <- 1.5 * IQR(x, na.rm = T) x[x < (qnt[1] - H)]  (qnt[2] + H)] <- caps[2]
H <- 1.5 * IQR(x, na.rm = T)
x[x < (qnt[1] - H)] (qnt[2] + H)] <- caps[2]
x[x < (qnt[1] - H)] (qnt[2] + H) <- caps[2]
x[x < (qnt[1] - H)]  (qnt[2] + H)] <- caps[2]
library(dbscan)
library(readxl)
library(dplyr)
setwd("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR")
file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/Data_1048_Yoga.xlsx")
head(file)
data <- file[, c(5,7,8,9,10,11,12)]
head(data)
kNNdistplot(data, k = 5)
abline(h=.06, col = "red", lty=2)
res <- dbscan(data, eps = .06, minPts = 15)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
res <- dbscan(data, eps = .06, minPts = 20)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
setwd("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR")
write.csv(data, file = "Dbscan_20.csv")
abline(h=.06, col = "red", lty=2)
res <- dbscan(data, eps = .03, minPts = 20)
res
res <- dbscan(data, eps = .04, minPts = 20)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
res <- dbscan(data, eps = .05, minPts = 20)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
write.csv(data, file = "Dbscan_0.05_20.csv")
file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/New_Cidanau_580.xlsx")
# file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/Data_1048_Yoga.xlsx")
head(file)
# data <- file[, c(5,7,8,9,10,11,12)]
data <- file[, c(5:11)]
head(data)
kNNdistplot(data, k = 5)
abline(h=.06, col = "red", lty=2)
res <- dbscan(data, eps = .05, minPts = 20)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
res <- dbscan(data, eps = .05, minPts = 5)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
res <- dbscan(data, eps = .06, minPts = 5)
res
res <- dbscan(data, eps = .06, minPts = 20)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
res <- dbscan(data, eps = .05, minPts = 15)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
res <- dbscan(data, eps = .05, minPts = 10)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
write.csv(data, file = "Dbscan_0.05_10.csv")
View(clean)
res <- dbscan(data, eps = .05, minPts = 15)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
write.csv(data, file = "Dbscan_0.05_15.csv")
res <- dbscan(data, eps = .05, minPts = 3)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
write.csv(data, file = "Dbscan_0.05_3.csv")
res <- dbscan(data, eps = .06, minPts = 5)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
Dbscan_0.06_5.csv
write.csv(data, file = "Dbscan_0.06_5.csv")
# file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/New_Cidanau_580.xlsx")
file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/Data_1048_Yoga.xlsx")
head(file)
data <- file[, c(5,7,8,9,10,11,12)]
# data <- file[, c(5:11)]
kNNdistplot(data, k = 5)
abline(h=.06, col = "red", lty=2)
res <- dbscan(data, eps = .05, minPts = 5)
res
res <- dbscan(data, eps = .05, minPts = 20)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
par(mfrow=c(1,2))
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
write.csv(data, file = "Dbscan1000_0.05_20.csv")
res <- dbscan(data, eps = .05, minPts = 5)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
write.csv(data, file = "Dbscan1000_0.05_5.csv")
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
file$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
cleanall<-file %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(cleanall$Band_4, cleanall$frci)
plot(file$Band_4, file$frci)
write.csv(data, file = "Dbscan1000E_0.05_5.csv")
write.csv(clean, file = "Dbscan500_0.06_5.csv")
setwd("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR")
# file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/New_Cidanau_580.xlsx")
file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/Data_1048_Yoga.xlsx")
head(file)
data <- file[, c(5,7,8,9,10,11,12)]
# data <- file[, c(5:11)]
head(data)
kNNdistplot(data, k = 5)
abline(h=.05, col = "red", lty=2)
res <- dbscan(data, eps = .05, minPts = 5)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
file$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
cleanall<-file %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
par(mfrow=c(1,2))
plot(cleanall$Band_4, cleanall$frci)
plot(file$Band_4, file$frci)
write.csv(clean, file = "Dbscan1000_0.05_5.csv")
write.csv(cleanall, file = "Dbscan1000E_0.05_5.csv")
head(cleanall)
cleanall %>%
group_by(class)
summarise(n())
### next step
cleanall %>%
group_by(class) %>%
summarise(n())
head(cleanall)
cleanall$Class
cleanall %>%
group_by(class) %>%
summarise(n())
cleanall %>%
group_by(cleanall$class) %>%
summarise(n())
cleanall %>%
group_by(class) %>%
summarize(n())
head(cleanall)
cleanall %>%
group_by(kategori) %>%
summarize(n())
### next step
cleanall$kelas <-cleanall$Class
cleanall %>%
group_by(kelas) %>%
summarize(n())
number <-cleanall %>%
group_by(kelas) %>%
summarize(n())
sample_n(kelas, 57)
cleanall %>%
sample_n(kelas, 57)
cleanall %>%
group_by(kelas)%>%
sample_n(kelas, 57)
cleanall %>%
group_by(kelas)%>%
sample_n(57)
sample <-cleanall %>%
group_by(kelas)%>%
sample_n(57)
sample
sample %>%
group_by(kelas)%>%
summarise(n())
min(number)
number
min(number$`n()`)
sample <-cleanall %>%
group_by(kelas)%>%
sample_n(min(number$`n()`))
write.csv(sample, file = "Dbscan1000Samp_0.05_5.csv")
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(sample$Band_4, sample$frci)
plot(data$Band_4, data$frci)
res
kNNdistplot(data, k = 10)
# abline(h=.05, col = "red", lty=2)
abline(h=.1, col = "red", lty=2)
# res <- dbscan(data, eps = .05, minPts = 5)
res <- dbscan(data, eps = .1, minPts = 10)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
setwd("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR")
# file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/New_Cidanau_580.xlsx")
file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/Data_1048_Yoga.xlsx")
head(file)
data <- file[, c(5,7,8,9,10,11,12)]
# data <- file[, c(5:11)]
head(data)
kNNdistplot(data, k = 10)
abline(h=.05, col = "red", lty=2)
# abline(h=.1, col = "red", lty=2)
res <- dbscan(data, eps = .05, minPts = 10)
# res <- dbscan(data, eps = .1, minPts = 10)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
file$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
cleanall<-file %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
par(mfrow=c(1,2))
plot(cleanall$Band_4, cleanall$frci)
plot(file$Band_4, file$frci)
write.csv(clean, file = "Dbscan1000_0.05_10.csv")
### next step
cleanall$kelas <-cleanall$Class
number <-cleanall %>%
group_by(kelas) %>%
summarize(n())
number
sample <-cleanall %>%
group_by(kelas)%>%
sample_n(min(number$`n()`))
write.csv(sample, file = "Dbscan1000Samp_0.05_10.csv")
# file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/New_Cidanau_580.xlsx")
file =read_excel("D:/FORESTS2020/GITHUB/Plugin/GitTesis/SVR/Data_1048_Yoga.xlsx")
head(file)
data <- file[, c(5,7,8,9,10,11,12)]
# data <- file[, c(5:11)]
head(data)
kNNdistplot(data, k = 2)
library(dbscan)
data(iris)
iris <- as.matrix(iris[,1:4])
## find suitable eps parameter using a k-NN plot for k = dim + 1
## Look for the knee!
kNNdistplot(iris, k = 5)
abline(h=.5, col = "red", lty=2)
# data <- file[, c(5:11)]
head(data)
kNNdistplot(data, k = 2)
abline(h=.02, col = "red", lty=2)
# abline(h=.1, col = "red", lty=2)
res <- dbscan(data, eps = .02, minPts = 5)
# res <- dbscan(data, eps = .1, minPts = 10)
res
pairs(data, col = res$cluster + 1L)
data$cluster<-res$cluster
file$cluster<-res$cluster
clean<-data %>% filter(cluster > 0)
cleanall<-file %>% filter(cluster > 0)
par(mfrow=c(1,2))
plot(clean$Band_4, clean$frci)
plot(data$Band_4, data$frci)
par(mfrow=c(1,2))
plot(cleanall$Band_4, cleanall$frci)
plot(file$Band_4, file$frci)
write.csv(clean, file = "Dbscan1000_0.02_5.csv")
#### select k
data(iris)
iris <- as.matrix(iris[,1:4])
kNNdist(iris, k=4, search="kd")
kNNdistplot(iris, k=4)
install.packages("MODIStsp")
library(MODIStsp)
MODIStsp::
MODIStsp
MODIStsp()
library(MODIStsp)
